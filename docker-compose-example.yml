version: '3.8'

# MCP Oracle v1.3.1 - Production-Hardened Docker Compose Configuration
# Zero vulnerabilities, bulletproof reliability, comprehensive quality assurance

services:
  mcp-oracle:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-oracle
    restart: unless-stopped
    ports:
      - "${PORT:-4010}:4010"
      - "${WS_PORT:-4011}:4011"
    environment:
      - NODE_ENV=production
      - PORT=4010
      - WS_PORT=4011
      - REDIS_URL=${REDIS_URL}
      - MONGODB_URL=${MONGODB_URL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    env_file:
      - .env
    depends_on:
      - redis
    external_links:
      - mongodb:mongodb
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - mcp-oracle-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


  redis:
    image: redis:7-alpine
    container_name: mcp-oracle-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      sh -c "redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --requirepass \$${REDIS_PASSWORD}"
    volumes:
      - redis_data:/data
    networks:
      - mcp-oracle-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5

  # Optional: Redis Commander for debugging
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: mcp-oracle-redis-ui
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - mcp-oracle-network
    profiles:
      - debug

volumes:
  redis_data:
    driver: local

networks:
  mcp-oracle-network:
    driver: bridge
